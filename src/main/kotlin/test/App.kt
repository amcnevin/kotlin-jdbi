/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package test

import org.hsqldb.rights.User
import org.jdbi.v3.core.Handle
import org.jdbi.v3.core.Jdbi
import java.sql.ResultSet
import java.sql.SQLException


fun main(args: Array<String>) {
    println("Hello, World!")

    val jdbi: Jdbi = Jdbi.create("jdbc:hsqldb:mem:testDB", "sa", "")

    jdbi.useHandle<RuntimeException> { handle: Handle ->
        handle.execute("create table students (id int primary key, name varchar(100))")
        handle.execute("insert into students (id, name) values (?, ?)", 1, "Alice")
        handle.execute("insert into students (id, name) values (?, ?)", 2, "Bob")
    }

    // Simple Select on single column
    val names = jdbi.withHandle<List<String>, SQLException> { handle: Handle ->
        handle.createQuery("select name from students")
                .mapTo(String::class.java)
                .list()
    }
    println(names)

    // select with custom Row Mapper
    val students: List<Student> = jdbi.withHandle<List<Student>, SQLException> { handle: Handle ->
        handle.createQuery("SELECT id, name FROM students ORDER BY id ASC")
                .map({ rs: ResultSet, ctx -> Student(rs.getInt("id"), rs.getString("name")) })
                .list()
    }
    println(students)

    // select with a MapToBean mapping
    val studentModels: List<Student> = jdbi.withHandle<List<Student>, SQLException> { handle : Handle ->
        handle.createQuery("Select id, name FROM students")
                .mapToBean(Student::class.java)
                .list()
    }

    println(studentModels)

}
